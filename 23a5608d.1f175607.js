(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{110:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return s}));var n=a(2),o=a(6),r=(a(0),a(134)),i={id:"postgre",title:"Java Micronaut REST Server with PostgreSQL"},c={id:"micronaut/postgre/postgre",isDocsHomePage:!1,title:"Java Micronaut REST Server with PostgreSQL",description:"Time: 45 minutes",source:"@site/docs\\micronaut\\postgre\\postgre.md",permalink:"/code_now/docs/micronaut/postgre/postgre",editUrl:"https://github.com/VitSestak/code_now/docs/micronaut/postgre/postgre.md",sidebar:"Docs",previous:{title:"Java Micronaut REST Server with Redis and Kafka",permalink:"/code_now/docs/micronaut/redis/redis"},next:{title:"Java Micronaut REST API",permalink:"/code_now/docs/micronaut/restApi/restapi"}},l=[{value:"What you\u2019ll learn",id:"what-youll-learn",children:[]},{value:"Project source",id:"project-source",children:[]},{value:"Before you begin",id:"before-you-begin",children:[]},{value:"Steps",id:"steps",children:[]},{value:"What\u2019s next?",id:"whats-next",children:[]}],p={rightToc:l};function s(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Time: 45 minutes"),Object(r.b)("h2",{id:"what-youll-learn"},"What you\u2019ll learn"),Object(r.b)("p",null,"How to setup your application for : "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"connecting to PostgreSQL database,"),Object(r.b)("li",{parentName:"ul"},"getting data from REST API, "),Object(r.b)("li",{parentName:"ul"},"providing data to REST API. ")),Object(r.b)("p",null,"In this tutorial, we will create a simple java component with Java Micronaut Data scaffolder with connection to PostgreSQL database storage. We want to expose single REST endpoint for getting basic client data information, creating a microservice CRUD layer above DB storage."),Object(r.b)("p",null,Object(r.b)("img",Object(n.a)({parentName:"p"},{src:"https://github.com/VitSestak/docusaurus/blob/master/docs/micronaut/postgre/img/ClientDataDB.png",alt:"clientDataDB"}))),Object(r.b)("h2",{id:"project-source"},"Project source"),Object(r.b)("p",null,"This example project can be cloned from: ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"mailto:git@gitlab.factory.innobank.codenow.com"}),"git@gitlab.factory.innobank.codenow.com"),":innobank/client-data-db.git"),Object(r.b)("h2",{id:"before-you-begin"},"Before you begin"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Prepare your local development environment for CodeNOW with Micronaut. ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Follow the tutorial instructions in ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.codenow.com/docs/local-development-with-codenow/java-micronaut-local-development/"}),"Java Micronaut Local Development")," tutorial."))),Object(r.b)("li",{parentName:"ul"},"Run PostgreSQL locally. ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Use docker compose as described in the section ",Object(r.b)("em",{parentName:"li"},"Docker compose and third-party tools")," of the ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.codenow.com/docs/local-development-with-codenow/java-micronaut-local-development/"}),"Java Micronaut Local Development")," tutorial. "))),Object(r.b)("li",{parentName:"ul"},"Create a new component",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"For details see the section ",Object(r.b)("em",{parentName:"li"},"Prerequisites")," of the ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.codenow.com/docs/local-development-with-codenow/java-micronaut-local-development/"}),"Java Micronaut Local Development")," tutorial.")))),Object(r.b)("h2",{id:"steps"},"Steps"),Object(r.b)("p",null,"Open your IDE, import created component and start coding:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Define jpa entity Client. This simple table will store basic client data:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Generate getters and setters with your IDE"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"01  package io.codenow.client.data.db.service.repository.entity;\n02   \n03  import java.time.LocalDate;\n04 \n05  import javax.persistence.Entity;\n06  import javax.persistence.GeneratedValue;\n07  import javax.persistence.Id;\n08 \n09  @Entity\n10  public class Client {\n11      @Id\n12      @GeneratedValue\n13      private Long id;\n14 \n15      private String username;\n16      private String firstname;\n17      private String surname;\n18      private LocalDate birthdate;\n19  }\n"))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Create new ClientRepository, which is basic CRUD interface for micronaut data DB access:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"01  package io.codenow.client.data.db.service.repository;\n02   \n03  import io.codenow.client.data.db.service.repository.entity.Client;\n04  import io.micronaut.data.jdbc.annotation.JdbcRepository;\n05  import io.micronaut.data.repository.CrudRepository;\n06  import io.reactivex.Maybe;\n07 \n08 \n09  @JdbcRepository\n10  public interface ClientRepository extends CrudRepository<Client, Long> {\n11      Maybe<Client> findByUsername(String username);\n12  }\n"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Create new controller and put all parts together"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"More detail about Micronaut controller:  ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.micronaut.io/latest/guide/index.html#httpServer"}),"https://docs.micronaut.io/latest/guide/index.html#httpServer")),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'01  package io.codenow.client.data.db.service.controller;\n02 \n03  import javax.inject.Inject;\n04  import javax.validation.constraints.NotNull;\n05 \n06  import io.codenow.client.data.db.service.repository.ClientRepository;\n07  import io.codenow.client.data.db.service.repository.entity.Client;\n08  import io.micronaut.http.annotation.Consumes;\n09  import io.micronaut.http.annotation.Controller;\n10  import io.micronaut.http.annotation.Get;\n11  import io.micronaut.http.annotation.PathVariable;\n12  import io.micronaut.http.annotation.Produces;\n13  import io.micronaut.validation.Validated;\n14  import io.reactivex.Flowable;\n15  import io.reactivex.Maybe;\n16 \n17  /**\n18   * ClientDataController.\n19   */\n20  @Validated\n21  @Controller("/db")\n22  @Produces\n23  @Consumes\n24  public class ClientDataController {\n25 \n26      private final ClientRepository clientRepository;\n27   \n28      @Inject\n29      public ClientDataController(ClientRepository bookRepository) {\n30          this.clientRepository = bookRepository;\n31      }\n32 \n33      @Get("/clients")\n34      public Flowable<Client> listClients() {\n35          return Flowable.fromIterable(clientRepository.findAll());\n36      }\n37 \n38      @Get("/clients/{username}")\n39      public Maybe<Client> getClient(@PathVariable @NotNull String username) {\n40          return clientRepository.findByUsername(username);\n41 \n42      }\n43 \n44  }\n'))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Next prepare database configuration:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Go to PgAdmin console (",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"http://localhost:5050"}),"http://localhost:5050")," if using compose-postgre from our Local development manual) and create new db client-db with scheme ",Object(r.b)("strong",{parentName:"p"},"client-data"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Add maven dependency to your pom.xml"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"01  <dependency>\n02      <groupId>org.postgresql</groupId>\n03      <artifactId>postgresql</artifactId>\n04      <version>42.2.11</version>\n05  </dependency>\n"))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Now change configuration in ",Object(r.b)("em",{parentName:"p"},"config/application.yaml"),":")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Fill {db user} and {db password} according to your configuration")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Make sure you follow yaml syntax (especially whitespaces)"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"01  datasources:\n02    default:\n03      url: jdbc:postgresql://localhost:5432/client-db?currentSchema=client-data\n04      driverClassName: org.postgresql.Driver\n05      username: {db user}\n06      password: {db password}\n07      schema-generate: CREATE\n08    dialect: POSTGRES\n"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Do not forget to change swagger.yaml. Check it in example project: ",Object(r.b)("em",{parentName:"p"},"src/main/resources/META-INF/swagger/swagger.yaml"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Try to build and run the application in your IDE. After startup, you should be able to access your new controller\u2019s swagger: ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"http://localhost:8080/swagger/index.html"}),"http://localhost:8080/swagger/index.html")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"For correct setup, check Readme.md in project root or see tutorial ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.codenow.com/docs/local-development-with-codenow/java-micronaut-local-development/"}),"Java Micronaut Local Development"),", section ",Object(r.b)("em",{parentName:"li"},"Prepare local development IDE"))))),Object(r.b)("p",null,Object(r.b)("img",Object(n.a)({parentName:"p"},{src:"https://github.com/VitSestak/docusaurus/blob/master/docs/micronaut/postgre/img/clientDataDB_swagger.png",alt:"clientDataDBSwagger"}))),Object(r.b)("h2",{id:"whats-next"},"What\u2019s next?"),Object(r.b)("p",null,"If your code works in the local development, you are ready to push your changes to GIT and try to build and deploy your new component version to the CodeNOW environment. For more information see ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.codenow.com/docs/administration-manuals/deploy-application/"}),"Application Deployment")," and ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.codenow.com/docs/administration-manuals/deployment-monitoring/"}),"Monitoring"),", just make sure to ",Object(r.b)("strong",{parentName:"p"},"change the application.yaml properties from the local to the production setup.")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Check the ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://accounts.google.com/signin/v2/identifier?continue=https%3A%2F%2Fdrive.google.com%2Fa%2Fstratox.cz%2Fopen%3Fid%3D1lgWTgsGxnYmgJqqq21htQjJZ-QrJsgSAnkcGscd_GGE&service=wise&hd=stratox.cz&sacu=1&flowName=GlifWebSignIn&flowEntry=AddSession"}),"Get New PostgreSQL")," user manual to get CodeNOW managed component properties. "),Object(r.b)("li",{parentName:"ul"},"See tutorial ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.codenow.com/docs/java-micronaut-examples/java-micronaut-rest-server-with-redis-and-kafka/"}),"Micronaut REST server with Redis and Kafka"),".")))}s.isMDXComponent=!0}}]);