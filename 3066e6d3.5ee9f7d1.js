(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{111:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return s}));var n=a(2),o=a(6),i=(a(0),a(134)),r={id:"redis",title:"Java Micronaut REST Server with Redis and Kafka"},c={id:"micronaut/redis/redis",isDocsHomePage:!1,title:"Java Micronaut REST Server with Redis and Kafka",description:"Time: 40 minutes",source:"@site/docs\\micronaut\\redis\\redis.md",permalink:"/code_now/docs/micronaut/redis/redis",editUrl:"https://github.com/VitSestak/code_now/docs/micronaut/redis/redis.md",sidebar:"Docs",previous:{title:"Docs intro",permalink:"/code_now/docs/"},next:{title:"Java Micronaut REST Server with PostgreSQL",permalink:"/code_now/docs/micronaut/postgre/postgre"}},l=[{value:"What you will learn",id:"what-you-will-learn",children:[]},{value:"Project source",id:"project-source",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Steps",id:"steps",children:[]},{value:"What\u2019s next?",id:"whats-next",children:[]}],p={rightToc:l};function s(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Time: 40 minutes"),Object(i.b)("h2",{id:"what-you-will-learn"},"What you will learn"),Object(i.b)("p",null,"How to setup your application for : "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"connecting to Redis,"),Object(i.b)("li",{parentName:"ul"},"connecting to Kafka and publishing messages to its topic,"),Object(i.b)("li",{parentName:"ul"},"getting data from REST API, "),Object(i.b)("li",{parentName:"ul"},"providing data to REST API. ")),Object(i.b)("p",null,"In this tutorial, we will create a simple java component with the Java Micronaut scaffolder. We want to expose a single REST endpoint for getting user authorization roles. As roles are stored in Redis key-value store, we need a client configuration for our component. Any access to information about user roles should be logged in a Kafka topic, so we need a Kafka client configuration too."),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/docs/micronaut/redis/img/ClientAuthorizationService.png",alt:"clientAuthorizationService"}))),Object(i.b)("h2",{id:"project-source"},"Project source"),Object(i.b)("p",null,"This example project can be cloned from: ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"mailto:git@gitlab.factory.innobank.codenow.com"}),"git@gitlab.factory.innobank.codenow.com"),":innobank/client-authorization-service.git"),Object(i.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Prepare your local development environment for CodeNOW with Micronaut. ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Follow the tutorial instructions in the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.codenow.com/docs/local-development-with-codenow/java-micronaut-local-development/"}),"Java Micronaut Local Development")," tutorial."))),Object(i.b)("li",{parentName:"ul"},"Run Kafka and Redis locally. ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Use docker compose as described in the section ",Object(i.b)("em",{parentName:"li"},"Docker compose and third-party tools")," of the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.codenow.com/docs/local-development-with-codenow/java-micronaut-local-development/"}),"Java Micronaut Local Development")," tutorial. "))),Object(i.b)("li",{parentName:"ul"},"Create a new component",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"For details see the section ",Object(i.b)("em",{parentName:"li"},"Prerequisites")," of the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.codenow.com/docs/local-development-with-codenow/java-micronaut-local-development/"}),"Java Micronaut Local Development")," tutorial.")))),Object(i.b)("h2",{id:"steps"},"Steps"),Object(i.b)("p",null,"Open your IDE, import created component and start coding:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Define message payload. Here is an example of UserAuthorizationResponse, which is a simple POJO with user roles:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"generate getters and setters with your IDE"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"01  package io.codenow.client.authorization.service.model;    \n02\n03  import java.util.Set;\n04\n05  public class UserAuthorizationResponse {\n06\n07          private Set<String> roles;\n08\n09  }\n")))))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Next prepare the configuration for the kafka logging client:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Go to the Kafka administration console (",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://localhost:9000"}),"http://localhost:9000")," if using kafdrop from our Local development manual) and create a new topic ",Object(i.b)("strong",{parentName:"p"},"client-logging"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Add maven dependency to your pom.xml"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"01  <dependency>\n02    <groupId>io.micronaut.kafka</groupId>\n03    <artifactId>micronaut-kafka</artifactId>\n04    <version>2.0.0</version>\n05  </dependency>\n")))))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"For more details about micronaut-kafka, see: ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://micronaut-projects.github.io/micronaut-kafka/latest/guide/"}),"https://micronaut-projects.github.io/micronaut-kafka/latest/guide/"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Now use the code below to create a logging client:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"01  package io.codenow.client.authorization.service.logging;\n02  \n03  import io.micronaut.configuration.kafka.annotation.KafkaClient;\n04  import io.micronaut.configuration.kafka.annotation.KafkaKey;\n05  import io.micronaut.configuration.kafka.annotation.Topic;\n06 \n07  @KafkaClient\n08  public interface LoggingClient {\n09 \n10     void log(@Topic String topic, @KafkaKey String key, String msg);\n11  }\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Next prepare the configuration for the Redis client:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"For more details about Micronaut Redis, see: ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://micronaut-projects.github.io/micronaut-redis/snapshot/guide/"}),"https://micronaut-projects.github.io/micronaut-redis/snapshot/guide/")," ")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Add maven dependency to your pom.xml"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"01  <dependency>\n02    <groupId>io.micronaut.redis</groupId>\n03    <artifactId>micronaut-redis-lettuce</artifactId>\n04    <version>2.0.0</version>\n05  </dependency>\n"))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Create a new controller and put all the parts together"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"For more details about Micronaut controller, see:  ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.micronaut.io/latest/guide/index.html#httpServer"}),"https://docs.micronaut.io/latest/guide/index.html#httpServer")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'01  package io.codenow.client.authorization.service.controller;\n02 \n03 \n04  import java.util.List;\n05  import java.util.TreeSet; \n06 \n07  import javax.inject.Inject;\n08 \n09  import io.codenow.client.authorization.service.logging.LoggingClient;\n10  import io.codenow.client.authorization.service.model.UserAuthorizationResponse;\n11  import io.lettuce.core.api.StatefulRedisConnection;\n12  import io.lettuce.core.api.sync.RedisCommands;\n13  import io.micronaut.context.annotation.Value;\n14  import io.micronaut.http.annotation.Consumes;\n15  import io.micronaut.http.annotation.Controller;\n16  import io.micronaut.http.annotation.Get;\n17  import io.micronaut.http.annotation.PathVariable;\n18  import io.micronaut.http.annotation.Produces;\n19  import io.micronaut.validation.Validated;\n20  import io.reactivex.Single; \n21 \n22  /**\n23   * UserAuthorizationController.\n24   */\n25  @Validated\n26  @Controller("/user")\n27  public class UserAuthorizationController {\n28     \n29      @Inject private StatefulRedisConnection<String, String> connection;\n30      @Inject private LoggingClient loggingClient;\n31      @Value("${kafka.topic.name}") private String kafkaTopicName;\n32      @Value("${kafka.topic.key}") private String kafkaTopicKey;\n33 \n34      @Get("/{username}")\n35      @Produces\n36      @Consumes\n37      public Single<UserAuthorizationResponse> greeting(@PathVariable String username) {\n38      \n39       loggingClient.log(kafkaTopicName, kafkaTopicKey, username);\n40 \n41          final UserAuthorizationResponse response = new UserAuthorizationResponse();\n42          RedisCommands<String, String> commands = connection.sync();\n43          List<String> privileges = commands.lrange(username, 0L, 1000L);\n44          response.setRoles(new TreeSet<>(privileges));\n45      \n46          return Single.just(response);\n47      }\n48  }\n'))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Last but not least, append the configuration for Kafka and Redis to ",Object(i.b)("em",{parentName:"p"},"config/application.yaml")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Note that this configuration depends on your local development setup for Kafka and Redis and can be different case-by-case")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Make sure you follow yaml syntax (especially whitespaces)"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"01  redis:\n02    uri: redis://localhost:6379\n03 \n04  kafka:\n05    bootstrap:\n06      servers: localhost:29092\n07    topic:\n08      name: client-logging\n09      key: client-authorization-service\n"))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Do not forget to change the swagger.yaml. Check it in the example project: ",Object(i.b)("em",{parentName:"p"},"src/main/resources/META-INF/swagger/swagger.yaml"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Try to build and run application in your IDE. After startup, you should be able to access your new controller\u2019s swagger: ",Object(i.b)("strong",{parentName:"p"},Object(i.b)("a",Object(n.a)({parentName:"strong"},{href:"http://localhost:8080/swagger/index.html"}),"http://localhost:8080/swagger/index.html")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"For correct setup, check Readme.md in project root or see tutorial ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.codenow.com/docs/local-development-with-codenow/java-micronaut-local-development/"}),"Java Micronaut Local Development"),", section ",Object(i.b)("em",{parentName:"p"},"Prepare local development IDE"),"  "))),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/docs/micronaut/redis/img/ClientAuthorizationService_swagger.png",alt:"ClientAuthorizationServiceSwagger"}))),Object(i.b)("h2",{id:"whats-next"},"What\u2019s next?"),Object(i.b)("p",null,"If your code works in the local development, you are ready to push your changes to GIT and try to build and deploy your new component version to the CodeNOW environment. For more information see ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.codenow.com/docs/administration-manuals/deploy-application/"}),"Application Deployment")," and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.codenow.com/docs/administration-manuals/deployment-monitoring/"}),"Monitoring"),", just make sure to ",Object(i.b)("strong",{parentName:"p"},"change the application.yaml properties from the local to the production setup.")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"check ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.codenow.com/docs/managed-components-administration/get-new-redis/"}),"Get New Redis")," and ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.codenow.com/docs/managed-components-administration/get-new-apache-kafka/"}),"Get New Apache Kafka")," for setup in the CodeNOW environment")))}s.isMDXComponent=!0}}]);